// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NipInsight.Infrastructure.Data;

#nullable disable

namespace NipInsight.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityAuthorizedClerk", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EntityPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntityId", "EntityPersonId");

                    b.HasIndex("EntityPersonId");

                    b.ToTable("EntityAuthorizedClerk");
                });

            modelBuilder.Entity("EntityPartner", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EntityPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntityId", "EntityPersonId");

                    b.HasIndex("EntityPersonId");

                    b.ToTable("EntityPartner");
                });

            modelBuilder.Entity("EntityRepresentative", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EntityPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntityId", "EntityPersonId");

                    b.HasIndex("EntityPersonId");

                    b.ToTable("EntityRepresentative");
                });

            modelBuilder.Entity("NipInsight.Domain.Entities.Entity", b =>
                {
                    b.Property<string>("Nip")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasVirtualAccounts")
                        .HasColumnType("bit");

                    b.Property<string>("Krs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDenialBasis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDenialDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegistrationLegalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Regon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemovalBasis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResidenceAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestorationBasis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RestorationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusVat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nip");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("NipInsight.Domain.Entities.EntityPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("EntityAuthorizedClerk", b =>
                {
                    b.HasOne("NipInsight.Domain.Entities.Entity", null)
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NipInsight.Domain.Entities.EntityPerson", null)
                        .WithMany()
                        .HasForeignKey("EntityPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityPartner", b =>
                {
                    b.HasOne("NipInsight.Domain.Entities.Entity", null)
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NipInsight.Domain.Entities.EntityPerson", null)
                        .WithMany()
                        .HasForeignKey("EntityPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityRepresentative", b =>
                {
                    b.HasOne("NipInsight.Domain.Entities.Entity", null)
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NipInsight.Domain.Entities.EntityPerson", null)
                        .WithMany()
                        .HasForeignKey("EntityPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
